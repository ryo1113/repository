//======================================================================================================================
//
// スコアプラスUI処理[scoreplus.h]
// Author:RYO KANDA
//
//======================================================================================================================
#include "manager.h"

#include "number.h"

#include "game.h"
#include "scoreplus.h"

//======================================================================================================================
// マクロ定義
//======================================================================================================================

//======================================================================================================================
// メンバ変数
//======================================================================================================================

// コンストラクタ
CScorePlus::CScorePlus()
{

}

// デストラクタ
CScorePlus::~CScorePlus()
{

}

//======================================================================================================================
// 生成
//======================================================================================================================
CScorePlus * CScorePlus::Create(D3DXVECTOR3 pos, D3DXCOLOR col, int plus, int count)
{
	CScorePlus *pScorePlus;

	pScorePlus = new CScorePlus;

	pScorePlus->m_pos = pos;
	pScorePlus->m_col = col;
	pScorePlus->m_nPlusNum = plus;

	pScorePlus->Init();

	pScorePlus->m_nCount = count;

	return pScorePlus;
}

//======================================================================================================================
// 初期化
//======================================================================================================================
void CScorePlus::Init()
{
	m_size = D3DXVECTOR3(25.0f, 50.0f, 0.0f);
	m_Digit = 0;

	int nNum = m_nPlusNum;

	while (nNum != 0)
	{
		nNum /= 10;
		m_Digit++;
	}

	if (m_Digit > MAX_PLUSDIGIT)
	{
		return;
	}

	for (int nCnt = 0; nCnt < m_Digit; nCnt++)
	{
		m_Num[nCnt] = CNumber::Create(m_pos - D3DXVECTOR3(m_size.x * nCnt, 0.0f, 0.0f), m_size);

		int nDigit = m_nPlusNum % (int)pow(10, nCnt + 1.0f) / (int)pow(10, nCnt);

		m_Num[nCnt]->SetNum(nDigit);
		m_Num[nCnt]->SetColor(m_col);
	}
}

//======================================================================================================================
// 開放処理
//======================================================================================================================
void CScorePlus::Uninit()
{
	for (int nCnt = 0; nCnt < m_Digit; nCnt++)
	{
		if (m_Num[nCnt])
		{
			m_Num[nCnt]->Uninit();
		}
		m_Num[nCnt] = NULL;
	}
}

//======================================================================================================================
// 更新処理
//======================================================================================================================
void CScorePlus::Update()
{
	m_col.a = m_nCount / 30.0f * 1.0f;

	for (int nCnt = 0; nCnt < m_Digit; nCnt++)
	{
		m_Num[nCnt]->SetColor(m_col);
		m_Num[nCnt]->SetPos(D3DXVECTOR3(0.0f, 1.0f, 0.0f));
	}

	m_nCount--;
}

//======================================================================================================================
// 描画処理
//======================================================================================================================
void CScorePlus::Draw()
{

}
