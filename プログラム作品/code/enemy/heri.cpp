//======================================================================================================================
//
// 敵の処理[heri.cpp]
// Author:RYO KANDA
//
//======================================================================================================================
#include "heri.h"

#include "../scene.h"

//======================================================================================================================
// マクロ定義
//======================================================================================================================

//======================================================================================================================
// メンバ変数
//======================================================================================================================

//======================================================================================================================
// 敵の生成（ヘリ）
//======================================================================================================================
CEnemyHeli * CEnemyHeli::Create(D3DXVECTOR3 pos, float fspeed)
{
	CEnemyHeli *pEnemy;

	pEnemy = new CEnemyHeli;
	pEnemy->SetPos(pos);
	pEnemy->m_Type = CEnemyBase::ENEMYTYPE_PART2;

	pEnemy->Init();

	pEnemy->m_fSpeed = fspeed;
	pEnemy->BindTexture(m_pTexture[CEnemyBase::ENEMYTYPE_PART2]);

	return pEnemy;
}

//======================================================================================================================
// 初期化処理（ヘリ）
//======================================================================================================================
void CEnemyHeli::Init()
{
	CEnemyBase::Init();

	SetSize(D3DXVECTOR3(300.0f, 150.0f, 0.0f));
}

//======================================================================================================================
// 更新処理（ヘリ）
//======================================================================================================================
void CEnemyHeli::Update()
{
	m_move += D3DXVECTOR3(-3.0f, cosf(m_nTime * D3DX_PI / 90.0f) * 1.0f, 0.0f) * m_fSpeed;

	// 他の敵に当たる
	for (int nCnt = 0; nCnt < MAX_2D; nCnt++)
	{
		CScene *pScene = GetScene(OBJTYPE_ENEMY, nCnt);

		if (!pScene)
			continue;

		CEnemyBase *pEnemy = (CEnemyBase*)pScene;

		if (pEnemy->GetType() == CEnemyBase::ENEMYTYPE_PART2)
			continue;

		if (HitShapeCollision(pEnemy))
		{
			pEnemy->HitEnemy(false);
		}
	}

	CEnemyBase::Update();
}
