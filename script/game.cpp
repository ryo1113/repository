//======================================================================================================================
//
// ゲーム処理 [game.cpp]
// Author:RYO KANDA
//
//======================================================================================================================
#include "game.h"

#include "camera.h"

#include "bg.h"
#include "bullet.h"
#include "effect.h"
#include "enemy.h"
#include "explosion.h"
#include "player.h"

#include "score.h"
#include <time.h>
#include <random>

#ifdef _DEBUG
#include "keyboard.h"
#include "pad.h"
#endif

//======================================================================================================================
// マクロ定義
//======================================================================================================================
#define ENEMY_

//======================================================================================================================
// メンバ変数
//======================================================================================================================
CScore *CGame::m_Score = NULL;

//======================================================================================================================
// ゲーム生成
//======================================================================================================================
CGame *CGame::Create()
{
	CGame *pGame;

	pGame = new CGame;

	pGame->Init();

	return pGame;
}

//======================================================================================================================
// 初期化処理
//======================================================================================================================
void CGame::Init()
{
	CBg::Create(0, 0.0005f);

	CPlayer::Create();

	CEnemy::Create(D3DXVECTOR3(640.0f, 200.0f, 0.0f), CEnemy::ENEMYTYPE_PART1);
	CEnemy::Create(D3DXVECTOR3(1000.0f, 500.0f, 0.0f), CEnemy::ENEMYTYPE_PART1);
	CEnemy::Create(D3DXVECTOR3(1240.0f, 300.0f, 0.0f), CEnemy::ENEMYTYPE_PART1);

	CEnemy::Create(D3DXVECTOR3(1700.0f, 300.0f, 0.0f), CEnemy::ENEMYTYPE_PART2);

	m_Score = CScore::Create(D3DXVECTOR3(1250.0f, 60.0f, 0.0f), D3DXVECTOR3(60.0f, 100.0f, 0.0f), 5);

	CCamera::Create();

	srand((unsigned int)time(NULL));
	nCount = 0;

}

//======================================================================================================================
// 終了処理
//======================================================================================================================
void CGame::Uninit()
{

}

//======================================================================================================================
// 更新処理
//======================================================================================================================
void CGame::Update()
{
	CCamera::MoveCamera(D3DXVECTOR3(-0.2f, 0.0f, 0.0f));

	nCount++;

	if (nCount % 240 == 0)
	{
		CEnemy::Create(D3DXVECTOR3(1700.0f, (float)random(100, 670), 0.0f), CEnemy::ENEMYTYPE_PART2, nCount / 300.0f);
	}

	if (CEnemy::GetNumEnemy() == 0)
	{
		CRenderer::SetFade(CManager::MODE_RESULT);
	}

#ifdef _DEBUG
	CKeyboard *pKey = CManager::GetInputKeyboard();
	CPad *pPad = CManager::GetInputPad();

	if (pKey->GetKeyboardTrigger(DIK_RETURN) || pPad->GetJoypadTrigger(0, CPad::JOYPADKEY_B))
	{
		CRenderer::SetFade(CManager::MODE_RESULT);
	}
#endif
}

//======================================================================================================================
// 描画処理
//======================================================================================================================
void CGame::Draw()
{
	
}

//======================================================================================================================
// ゲーム状態のスコア追加
//======================================================================================================================
void CGame::AddGameScore(int nScore)
{
	m_Score->AddScore(nScore);
}

//======================================================================================================================
// ゲーム状態の設定
//======================================================================================================================
void CGame::SetGameState(GAMESTATE state)
{
	g_GameState = state;
	g_nCounterGameState = 0;
}

//======================================================================================================================
// ゲーム状態の取得
//======================================================================================================================
CGame::GAMESTATE CGame::GetGameState()
{
	return g_GameState;
}

//======================================================================================================================
// ランダム数値の取得
//======================================================================================================================
int CGame::random(int min, int max)
{
	// 乱数生成器
	static std::mt19937_64 create(0);

	// 一様分布整数 (int) の分布生成器
	std::uniform_int_distribution<int> nGet(min, max);

	// 乱数を生成
	return nGet(create);
}
