//======================================================================================================================
//
// 敵の処理[enemy.cpp]
// Author:RYO KANDA
//
//======================================================================================================================
#include "manager.h"
#include "enemy.h"

#include "bullet.h"
#include "explosion.h"
#include "score.h"

//======================================================================================================================
// マクロ定義
//======================================================================================================================
#define ENEMY_SPEED		(5.0f)
#define ENEMY_JUMPSPEED	(0.9f)

//======================================================================================================================
// プロトタイプ宣言
//======================================================================================================================

//======================================================================================================================
// メンバ変数
//======================================================================================================================
LPDIRECT3DTEXTURE9 CEnemy::m_pTexture = {};

// コンストラクタ
CEnemy::CEnemy() : CScene2D::CScene2D(OBJTYPE_ENEMY)
{

}

// デストラクタ
CEnemy::~CEnemy()
{

}

HRESULT CEnemy::Load()
{
	LPDIRECT3DDEVICE9 pDevice = CManager::GetRenderer()->GetDevice();

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice, "data/TEXTURE/enemy_00.png", &m_pTexture);

	if (m_pTexture == NULL)
	{
		return -1;
	}

	return S_OK;
}

void CEnemy::Unload()
{
	//テクスチャの開放
	if (m_pTexture != NULL)
	{
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}

//======================================================================================================================
// 生成
//======================================================================================================================
CEnemy *CEnemy::Create(D3DXVECTOR3 pos)
{
	CEnemy *pEnemy;

	pEnemy = new CEnemy;

	pEnemy->SetPos(pos);
	pEnemy->Init();
	pEnemy->BindTexture(m_pTexture);

	return pEnemy;
}

//======================================================================================================================
// 初期化
//======================================================================================================================
void CEnemy::Init()
{
	SetObjType(OBJTYPE_ENEMY);

	SetSize(D3DXVECTOR3(150.0f, 200.0f, 0.0f));
	SetPos(D3DXVECTOR3(1000, 300, 0.0f));
	CScene2D::Init();

	SetTextureAnimationTex(2, 4);
}

//======================================================================================================================
// プレイヤの開放処理
//======================================================================================================================
void CEnemy::Uninit()
{
	CScene2D::Uninit();

	this->Release();
}

//======================================================================================================================
// 更新処理
//======================================================================================================================
void CEnemy::Update()
{
	SetTextureAnimation(5, false);

	D3DXVECTOR3 pos = GetPos();

	//MoveSpeedEnemy();
	
	m_move.x -= m_move.x * 1 / 3;
	m_move.y -= m_move.y * 1 / 3;

	// 向きの処理
	Rot();

	if (fabsf(m_move.x) < 0.1f)
	{
		m_move.x = 0;
	}
	if (fabsf(m_move.y) < 0.1f)
	{
		m_move.y = 0;
	}

	SetPos(pos + m_move);

	if (UnlookJudge())
	{
		Uninit();
	}
}

//======================================================================================================================
// 描画処理
//======================================================================================================================
void CEnemy::Draw()
{
	CScene2D::Draw();
}

void CEnemy::HitEnemy()
{
	// 爆発生成
	CExplosion::Create(GetPos());

	CScore::AddScore(3000);

	this->Uninit();
}

//======================================================================================================================
// 移動処理
//======================================================================================================================
void CEnemy::MoveSpeedEnemy()
{
	m_move += D3DXVECTOR3(-5.0f, 0.0f, 0.0f);
}

//======================================================================================================================
// 弾の発射
//======================================================================================================================
void CEnemy::BulletShot()
{
	CKeyboard *pKey = CManager::GetInputKeyboard();

	//if (pKey->GetKeyboardPress(DIK_SPACE))
	{
		//CBullet::Create(GetPos());
	}
}