//======================================================================================================================
//
// 処理[score.cpp]
// Author:RYO KANDA
//
//======================================================================================================================
#include "manager.h"

#include "score.h"

#include "number.h"

//======================================================================================================================
// マクロ定義
//======================================================================================================================
#define	MAX_DIGIT		(8)

//======================================================================================================================
// プロトタイプ宣言
//======================================================================================================================

//======================================================================================================================
// メンバ変数
//======================================================================================================================
CNumber *CScore::m_apNumber[MAX_DIGIT] = {};
int CScore::m_nScore = 0;

// コンストラクタ
CScore::CScore() : CScene::CScene(OBJTYPE_SCORE)
{

}

// デストラクタ
CScore::~CScore()
{

}

//======================================================================================================================
// 生成
//======================================================================================================================
CScore *CScore::Create(D3DXVECTOR3 pos, D3DXVECTOR3 size)
{
	CScore *pScore;

	pScore = new CScore;

	for (int nCnt = 0; nCnt < MAX_DIGIT; nCnt++)
	{
		pScore->m_apNumber[nCnt] = CNumber::Create(pos - D3DXVECTOR3(size.x * nCnt, 0.0f, 0.0f), size);
	}

	pScore->Init();

	return pScore;
}

//======================================================================================================================
// 初期化
//======================================================================================================================
void CScore::Init()
{
	for (int nCnt = 0; nCnt < MAX_DIGIT; nCnt++)
	{
		if (m_apNumber[nCnt])
		{
			m_apNumber[nCnt]->Init();
		}
	}
}

//======================================================================================================================
// 開放処理
//======================================================================================================================
void CScore::Uninit()
{
	for (int nCnt = 0; nCnt < MAX_DIGIT; nCnt++)
	{
		if (m_apNumber[nCnt])
		{
			m_apNumber[nCnt] = NULL;
		}
	}

	this->Release();
}

//======================================================================================================================
// 更新処理
//======================================================================================================================
void CScore::Update()
{

}

//======================================================================================================================
// 描画処理
//======================================================================================================================
void CScore::Draw()
{
	for (int nCnt = 0; nCnt < MAX_DIGIT; nCnt++)
	{
		if (m_apNumber[nCnt])
		{
			m_apNumber[nCnt]->Draw();
		}
	}
}

void CScore::SetScore(int nScore)
{
	m_nScore = nScore;

	for (int nCnt = 0; nCnt < MAX_DIGIT; nCnt++)
	{
		int nDigit = m_nScore % (int)pow(10, nCnt + 1.0f) / (int)pow(10, nCnt);

		m_apNumber[nCnt]->SetNum(nDigit);
	}
}

void CScore::AddScore(int nNumber)
{
	m_nScore += nNumber;

	for (int nCnt = 0; nCnt < MAX_DIGIT; nCnt++)
	{
		int nDigit = m_nScore % (int)pow(10, nCnt + 1.0f) / (int)pow(10, nCnt);

		m_apNumber[nCnt]->SetNum(nDigit);
	}
}

