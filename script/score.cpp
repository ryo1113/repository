//======================================================================================================================
//
// 処理[score.cpp]
// Author:RYO KANDA
//
//======================================================================================================================
#include "manager.h"

#include "score.h"

#include "number.h"

//======================================================================================================================
// マクロ定義
//======================================================================================================================
#define SCORE_MAX		(6)

//======================================================================================================================
// プロトタイプ宣言
//======================================================================================================================

//======================================================================================================================
// メンバ変数
//======================================================================================================================
int CScore::m_nScore[6] = { 3500,3000,2500,2000,5500,1000 };

// コンストラクタ
CScore::CScore() : CScene::CScene(OBJTYPE_UI)
{

}

// デストラクタ
CScore::~CScore()
{

}

//======================================================================================================================
// 生成
//======================================================================================================================
CScore *CScore::Create(D3DXVECTOR3 pos, D3DXVECTOR3 size, int nNum)
{
	CScore *pScore;

	pScore = new CScore;

	for (int nCnt = 0; nCnt < MAX_DIGIT; nCnt++)
	{
		pScore->m_apNumber[nCnt] = CNumber::Create(pos - D3DXVECTOR3(size.x * nCnt, 0.0f, 0.0f), size);
	}

	pScore->Init();

	pScore->Display(nNum);

	return pScore;
}

//======================================================================================================================
// 初期化
//======================================================================================================================
void CScore::Init()
{
	for (int nCnt = 0; nCnt < MAX_DIGIT; nCnt++)
	{
		if (m_apNumber[nCnt])
		{
			m_apNumber[nCnt]->Init();
		}
	}

	QuickSort(m_nScore, 0, SCORE_MAX - 1);
	
	if (CManager::GetMode() == CManager::MODE_GAME)
	{
		m_nScore[5] = 0;
	}
}

//======================================================================================================================
// 開放処理
//======================================================================================================================
void CScore::Uninit()
{
	for (int nCnt = 0; nCnt < MAX_DIGIT; nCnt++)
	{
		if (m_apNumber[nCnt])
		{
			m_apNumber[nCnt] = NULL;
		}
	}

	this->Release();
}

//======================================================================================================================
// 更新処理
//======================================================================================================================
void CScore::Update()
{

}

//======================================================================================================================
// 描画処理
//======================================================================================================================
void CScore::Draw()
{
	for (int nCnt = 0; nCnt < MAX_DIGIT; nCnt++)
	{
		if (m_apNumber[nCnt])
		{
			m_apNumber[nCnt]->Draw();
		}
	}
}

//======================================================================================================================
// スコア処理
//======================================================================================================================
void CScore::SetScore(int nScore)
{
	m_nScore[5] = nScore;

	Display(5);
}

void CScore::AddScore(int nNumber)
{
	m_nScore[5] += nNumber;

	Display(5);
}

//======================================================================================================================
// 表示処理
//======================================================================================================================
void CScore::Display(int Cnt)
{
	for (int nCnt = 0; nCnt < MAX_DIGIT; nCnt++)
	{
		int nDigit = m_nScore[Cnt] % (int)pow(10, nCnt + 1.0f) / (int)pow(10, nCnt);

		m_apNumber[nCnt]->SetNum(nDigit);
	}
}

//======================================================================================================================
// クイックソートによる並び替え処理
//======================================================================================================================
void CScore::QuickSort(int nScore[], int nLeft, int nRight)
{
	int	nLeftHold = nLeft;

	int nRightHold = nRight;

	int nQivot = nScore[nLeft];

	while (nLeft < nRight)
	{
		while ((nScore[nRight] <= nQivot) && (nLeft < nRight))
		{
			nRight--;
		}

		if (nLeft != nRight)
		{
			nScore[nLeft] = nScore[nRight];
			nLeft++;
		}

		while ((nScore[nLeft] >= nQivot) && (nLeft < nRight))
		{
			nLeft++;
		}

		if (nLeft != nRight)
		{
			nScore[nRight] = nScore[nLeft];
			nRight--;
		}
	}
	nScore[nLeft] = nQivot;

	nQivot = nLeft;

	nLeft = nLeftHold;
	nRight = nRightHold;

	if (nLeft < nQivot)
	{
		QuickSort(nScore, nLeft, nQivot - 1);
	}
	if (nRight > nQivot)
	{
		QuickSort(nScore, nQivot + 1, nRight);
	}
}
